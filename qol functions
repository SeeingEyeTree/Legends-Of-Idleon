import numpy as np
import pyautogui
import time
from Keys import PressKey, ReleaseKey , I, ESCAPE, C, M, DELETE, FOUR, THREE, Q, FIVE, ZERO, ENTER, ONE
from grab_screen import grab_screen
import cv2
from GetKeys import key_check
from BasicFunctions import click,SW_SH_cals,press,hold_down,start_on_key,swap_auto,click_tp,Town_Tp,find_player


start_on_key('S') 

def match_templat(where,what,threshold):
    res = cv2.matchTemplate(where,what,cv2.TM_CCOEFF_NORMED)
    loc = np.where( res >= threshold)
    '''
    whereRGB=cv2.cvtColor(where,cv2.COLOR_GRAY2RGB)
    w1, h1 = what.shape[::-1]
    for pt1 in zip(*loc[::-1]):
            cv2.rectangle(whereRGB, pt1, (pt1[0] + w1, pt1[1] + h1), (0,0,255), 2)
    cv2.imshow('matches',whereRGB)
    print(loc)
    '''    
    return loc 


def inventory(page, slotx, sloty):
    in_page = page
    page = 0
    x = 1287
    y=233
    while page != in_page:
        x+=116
        page+=1
    click(x,y)
    slotx=(slotx*120)+1320
    sloty=(sloty*120)+360
    pyautogui.moveTo(slotx,sloty)
    
    
    
def vials():
    print('Will you rember that you need to start with your inventory open this time? ')
    x=0
    looptimes=input('number of times to loop')
    looptimes=int(looptimes)
    time.sleep(2)
    while x<looptimes:
        pyautogui.moveTo(1320, 360)
        pyautogui.dragTo(280, 450, 0.3, button='left')
        time.sleep(3)
        press(ESCAPE)
        click(730,780)
        press(I)
        time.sleep(2)
        x+=1
       
       
def buy_slot(hold_down_t, slot):
    sloty=(slot*130)+390
    hold_down(hold_down_t,1047,sloty)
    click(689,sloty)
    

def click_claim_and_col():
    screen=grab_screen()
    screen_gray= cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    claim=cv2.imread('C:\\Users\\aephraim\\Pictures\\ClaimButon.PNG')
    claim_gray= cv2.cvtColor(claim, cv2.COLOR_BGR2GRAY)
    y,x=match_templat(screen_gray,claim_gray,0.9)
    y=y[0]+50
    x=x[0]+50
    click(x,y)
    time.sleep(2)
    x,y=find_player()
    y-=50
    pyautogui.moveTo(120,y)
    pyautogui.mouseDown()
    pyautogui.moveTo(1800,y,4)
    pyautogui.mouseUp()
    
    
    
def anvil_collection(Startx,Starty,page):
    if page==0:
        press(ESCAPE)
        click(1686,641)
        click(607,765)
    if page==1:
        press(ESCAPE)
        click(1686,641)
        click(1403,767)
    click(Startx,Starty)
    click(1000,760)
    time.sleep(2.5)
    try:
        click_claim_and_col()
    except:
        print('No claim button')
    press(C)
    click(1170,225)
    click(900,400)
    click(1030,230)
    click(890,220)
    press(ESCAPE)
    
    
def anvil():
    loop=0
    startx=666
    starty=360
    while loop<3:
        anvil_collection(startx,starty,0)
        startx+=334
        loop+=1
    loop=0
    startx=666
    starty=666
    while loop<3:
        anvil_collection(startx,starty,0)
        startx+=334
        loop+=1
    time.sleep(0.2)
    loop=0
    startx=666
    starty=360
    while loop<3:
        anvil_collection(startx,starty,1)
        startx+=334
        loop+=1
        
        
def shards_and_tps():
    click(1137,800)
    click(657,855)
    hold_down(2.5,1047,603)
    hold_down(1,1047,726)
    click(687,783)
    click(687,639)
    
    
def active_col():
    x,y=find_player()
    x-=130
    y-=50
    pyautogui.moveTo(x,y)
    pyautogui.mouseDown()
    pyautogui.move(500,1,1.5)
    pyautogui.mouseUp()
    
    
    
    
run=intput('What do you want to run?')
if run == 'active col':
    active_col
elfi run == 'vials':
